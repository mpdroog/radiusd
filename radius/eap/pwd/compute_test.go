package pwd

import (
	"crypto/elliptic"
	"crypto/rand"
	"fmt"
	"math/big"
	"testing"
)

// To compare output to legendre of C-code
func TestLegendreHardcoded(t *testing.T) {
	prime := elliptic.P256().Params().P
	if testing.Verbose() {
		fmt.Printf("prime=%s\n", prime.String())
	}

	qrs := map[string]int{
		"28133167827024614301452485568862747143978208594907376383908746543801440673794":  -1,
		"98953922888174170069526283121395472042476767562864905469797438878769014169167":  1,
		"105970509436132963152232163648318488082778589350674603165197644556591166968193": 1,
		"79628458656456195345154352175599072192801636508552412772529939262358947812546":  -1,
		"13349242574925099927661802165489383853482283224677766981926926163966427896166":  -1,
		"60042326102702740020127068577060242704512652609153156693973170169839595796850":  -1,
		"55483126565765403240236092379678392558000465058340760444242929201642333287059":  1,
		"75395727624088221042529477775165930956064936836312298406707377639823795202793":  -1,
		"101726179926700354581958303890242268718638962628535059086672140835729908172098": 1,
		"89432852621718252106157797666362602541566084230203189153267556539429893403602":  1,
		"79270784987442168787243364263203344414033176497911055224391518901062383253515":  -1,
		"61032874506393459374616271276746997074705339126942476432557313471111144967273":  1,
	}

	for qrv, val := range qrs {
		qr := new(big.Int)
		if _, ok := qr.SetString(qrv, 10); !ok {
			panic("qr.setString failed?")
		}

		output := legendre(qr, prime)
		if val != output {
			t.Errorf("legendre(%s) should return %d but got %d", qrv, val, output)
		}
	}
}

func TestLegendre(t *testing.T) {
	primeN := elliptic.P256().Params().P

	ok := false
	for i := 0; i < 100; i++ {
		randomValue, e := rand.Int(rand.Reader, primeN)
		if e != nil {
			t.Fatal(e)
		}

		res := legendre(randomValue, primeN)
		if testing.Verbose() {
			fmt.Printf("legendre=%d\n", res)
		}
		if res != -1 {
			ok = true
			break
		}
	}
	if !ok {
		t.Errorf("Failed finding legendre after 100-rounds")
	}
}
